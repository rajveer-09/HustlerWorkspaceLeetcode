class DSU {
public:
    vector<int> parent, size;
    DSU(int n) {
        parent.resize(n);
        size.resize(n, 1);
        iota(parent.begin(), parent.end(), 0);
    }
    int find(int a) {
        if (parent[a] != a) parent[a] = find(parent[a]);
        return parent[a];
    }
    void unite(int a, int b) {
        a = find(a);
        b = find(b);
        if (a != b) {
            if (size[a] < size[b]) swap(a,b);
            parent[b] = a;
            size[a] += size[b];
        }
    }
    int getSize(int a) {
        return size[find(a)];
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU dsu(n);

        vector<bool> isClean(n, true);
        for (int node : initial) {
            isClean[node] = false;
        }

        // Union only clean nodes connected with edges
        for (int i = 0; i < n; i++) {
            if (!isClean[i]) continue;
            for (int j = i + 1; j < n; j++) {
                if (isClean[j] && graph[i][j] == 1) {
                    dsu.unite(i, j);
                }
            }
        }

        // Count how many initial infected nodes affect each clean component
        unordered_map<int, int> infectedCount; // root -> count of infected nodes connected to that component
        unordered_map<int, unordered_set<int>> nodeToGroups; // infected node -> set of connected components

        for (int node : initial) {
            unordered_set<int> groups;
            for (int i = 0; i < n; i++) {
                if (isClean[i] && graph[node][i] == 1) {
                    groups.insert(dsu.find(i));
                }
            }
            nodeToGroups[node] = groups;
            for (int grp : groups) {
                infectedCount[grp]++;
            }
        }

        int maxSaved = -1;
        int ans = *min_element(initial.begin(), initial.end());

        for (int node : initial) {
            int saved = 0;
            for (int grp : nodeToGroups[node]) {
                if (infectedCount[grp] == 1) { // This infected node is the only one connected to this group
                    saved += dsu.getSize(grp);
                }
            }
            if (saved > maxSaved || (saved == maxSaved && node < ans)) {
                maxSaved = saved;
                ans = node;
            }
        }

        return ans;
    }
};
/*
We will remove exactly one node from initial, completely removing it and
any connections from this node to any other node.
*/