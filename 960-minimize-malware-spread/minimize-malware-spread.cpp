class DSU {
public:
    vector<int> parent;
    vector<int> sz;
    DSU(int n) {
        parent.resize(n);
        iota(parent.begin(), parent.end(), 0);
        sz.assign(n, 1);
    }
    int find(int i) {
        if (parent[i] == i) {
            return i;
        }
        return parent[i] = find(parent[i]);
    }
    void unite(int i, int j) {
        int root_i = find(i);
        int root_j = find(j);
        if (root_i != root_j) {
            if (sz[root_i] < sz[root_j]) {
                swap(root_i, root_j);
            }
            parent[root_j] = root_i;
            sz[root_i] += sz[root_j];
        }
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU dsu(n);

        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (graph[i][j]) {
                    dsu.unite(i, j);
                }
            }
        }

        unordered_map<int, int> infected_counts;
        for (int node : initial) {
            infected_counts[dsu.find(node)]++;
        }

        int max_saved = -1;
        int result = -1;

        sort(initial.begin(), initial.end());

        for (int node : initial) {
            int root = dsu.find(node);
            int saved = 0;

            if (infected_counts[root] == 1) {
                saved = dsu.sz[root];
            }

            if (saved > max_saved) {
                max_saved = saved;
                result = node;
            } 
            else if (saved == max_saved && result == -1) {
                result = node;
            }
        }

        // if (max_saved == 0) {
        //     return initial[0];
        // }

        return result;
    }
};