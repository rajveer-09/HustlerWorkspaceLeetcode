class DSU {
public:
    vector<int> parent, size;
    
    DSU(int n) {
        parent.resize(n);
        size.resize(n, 1);
        iota(parent.begin(), parent.end(), 0);
    }
    int find(int a) {
        while (parent[a] != a) {
            a = parent[a];
        }
        return a;
    }
    void unite(int a, int b) {
        a = find(a);
        b = find(b);
        if (a != b) {
            if (size[a] < size[b]) {
                swap(a, b);
            }
            parent[b] = a;
            size[a] += size[b];
        }
    }
    int getSize(int a) {
        return size[find(a)];
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU dsu(n);
        
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    dsu.unite(i, j);
                }
            }
        }
        
        vector<int> infectedCount(n, 0);
        for (int node : initial) {
            infectedCount[dsu.find(node)]++;
        }
        
        sort(initial.begin(), initial.end());
        
        int result = initial[0], maxSaved = -1;
        
        for (int node : initial) {
            int root = dsu.find(node);

            if (infectedCount[root] == 1) {
                int sz = dsu.getSize(root);
                
                if (sz > maxSaved) {
                    maxSaved = sz;
                    result = node;
                }
            }
        }
        
        return result;
    }
};
/*
-> We will remove exactly one node from initial.
-> means ek node ko uninfected krnege 
*/